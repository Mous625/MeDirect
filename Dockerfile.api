#FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
#USER $APP_UID
#WORKDIR /app
#EXPOSE 8080
#EXPOSE 8081

#FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
#ARG BUILD_CONFIGURATION=Release
#WORKDIR /src
#
#COPY ["ExchangeSystem/ExchangeSystem.csproj", "ExchangeSystem/"]
#RUN dotnet restore "ExchangeSystem/ExchangeSystem.csproj"
#COPY . .
#WORKDIR "/src/ExchangeSystem"
#RUN dotnet build "./ExchangeSystem.csproj" -c $BUILD_CONFIGURATION -o /app/build
#
#FROM build AS publish
#ARG BUILD_CONFIGURATION=Release
#RUN dotnet publish "./ExchangeSystem.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false
#
#FROM base AS final
#WORKDIR /app
#COPY --from=publish /app/publish .
#ENTRYPOINT ["dotnet", "ExchangeSystem.dll"]

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy project files first to leverage Docker layer caching
COPY MeDirectTechnicalTest.sln /
COPY ExchangeSystem/ExchangeSystem.csproj ExchangeSystem/
COPY ExchangeSystem.Application/ExchangeSystem.Application.csproj ExchangeSystem.Application/
COPY ExchangeSystem.Domain/ExchangeSystem.Domain.csproj ExchangeSystem.Domain/
COPY ExchangeSystem.Infrastructure/ExchangeSystem.Infrastructure.csproj ExchangeSystem.Infrastructure/
COPY ExchangeSystem.Host.Api/ExchangeSystem.Host.Api.csproj ExchangeSystem.Host.Api/

# Restore dependencies
RUN dotnet restore ExchangeSystem/ExchangeSystem.csproj

# Copy the rest of the source and publish
COPY . .
RUN dotnet publish ExchangeSystem/ExchangeSystem.csproj -c Release -o /app/publish
# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app
COPY --from=build /app/publish .

# Configure port and entrypoint
ENV ASPNETCORE_HTTP_PORTS=8080
EXPOSE 8080
ENTRYPOINT ["dotnet", "ExchangeSystem.dll"]
